name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Poetry
      run: |
        pip install poetry

    - name: Install dependencies
      run: |
        poetry install --no-root

    - name: Create .env file for tests
      run: |
        echo "DATABASE_URL=sqlite:///./test.db" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=1" >> .env
        echo "ENVIRONMENT=test" >> .env
        echo "DEBUG=True" >> .env
        echo "POSTGRES_DB=test_db" >> .env
        echo "POSTGRES_USER=test_user" >> .env
        echo "POSTGRES_PASSWORD=test_pass" >> .env
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}

    - name: Run Alembic Migrations (Test DB)
      run: |
        poetry run alembic upgrade head

    - name: Run Tests
      run: |
        echo "Tests will run here"

    - name: Lint Code
      run: |
        echo "Linting will run here"

  build-and-push-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/combination-app-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/combination-app-backend:${{ github.sha }}
        file: Dockerfile